// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Profile
model Perfil {
  id      String @id @default(uuid())
  userId  String @unique
  nome    String
  email   String @db.Text
  fotoURL String @db.Text

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// server, tipo, discord server
model Server {
  id      String @id @default(uuid())
  nome    String
  fotoURL String @db.Text

  perfilId String
  perfil   Perfil @relation(fields: [perfilId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([perfilId])
}

// Cargos
enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  perfilId String
  perfil   Perfil @relation(fields: [perfilId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([perfilId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id          String      @id @default(uuid())
  nome        String
  channelType ChannelType @default(TEXT)

  perfilId String
  perfil   Perfil @relation(fields: [perfilId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([perfilId])
  @@index([serverId])
}
